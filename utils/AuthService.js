import AsyncStorage from '@react-native-async-storage/async-storage';

const AUTH_KEY = '@auth_user';
const USERS_KEY = '@users_list';

// Kh·ªüi t·∫°o danh s√°ch users m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
const initializeUsers = async () => {
    try {
        const existingUsers = await AsyncStorage.getItem(USERS_KEY);
        if (!existingUsers) {
            // T·∫°o m·ªôt user m·∫´u ƒë·ªÉ test
            const defaultUsers = [
                {
                    id: "user_demo_1",
                    name: "Nguy·ªÖn VƒÉn A",
                    email: "test@example.com",
                    password: "123456",
                    phone: "0123456789",
                    disable: ["Khi·∫øm th·ªã"],
                    joinDate: new Date().toLocaleDateString(),
                    type: "user",
                    intro: "Ng∆∞·ªùi d√πng m·∫´u",
                    exp: [],
                    dob: "01/01/1990",
                    sex: 1,
                    address: "H√† N·ªôi",
                    major: "",
                    image: [],
                    education: ["ƒê·∫°i h·ªçc"],
                    wishness: "T√¨m vi·ªác l√†m ph√π h·ª£p",
                    jobSave: [],
                    skill: ["Tin h·ªçc vƒÉn ph√≤ng"],
                    isAvailable: true,
                    letCompanyContact: true,
                    jobAttempt: [],
                    followCompany: [],
                    companyViewCount: 0,
                }
            ];
            await AsyncStorage.setItem(USERS_KEY, JSON.stringify(defaultUsers));
            console.log('‚úÖ ƒê√£ kh·ªüi t·∫°o database v·ªõi user m·∫´u');
            console.log('üìß Email: test@example.com');
            console.log('üîë Password: 123456');
        }
    } catch (error) {
        console.error('Error initializing users:', error);
    }
};

// ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
export const registerUser = async (userData) => {
    try {
        await initializeUsers();
        
        // L·∫•y danh s√°ch users hi·ªán t·∫°i
        const usersJson = await AsyncStorage.getItem(USERS_KEY);
        const users = JSON.parse(usersJson) || [];
        
        console.log('üìù ƒêƒÉng k√Ω user m·ªõi:', userData.email);
        
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = users.find(user => user.email === userData.email);
        if (existingUser) {
            console.log('‚ö†Ô∏è Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
            throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
        }
        
        // T·∫°o user m·ªõi v·ªõi ID duy nh·∫•t
        const newUser = {
            ...userData,
            id: Date.now().toString(),
            joinDate: new Date().toLocaleDateString(),
            type: "user",
            intro: userData.intro || "",
            exp: [],
            dob: null,
            sex: null,
            address: '',
            major: '',
            image: [],
            education: '',
            wishness: '',
            jobSave: [],
            skill: [],
            isAvailable: true,
            letCompanyContact: true,
            jobAttempt: [],
            followCompany: [],
            companyViewCount: 0,
        };
        
        console.log('‚úÖ User m·ªõi ƒë∆∞·ª£c t·∫°o v·ªõi ID:', newUser.id);
        
        // Th√™m user m·ªõi v√†o danh s√°ch
        users.push(newUser);
        await AsyncStorage.setItem(USERS_KEY, JSON.stringify(users));
        
        // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p
        await AsyncStorage.setItem(AUTH_KEY, JSON.stringify(newUser));
        
        console.log('üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!');
        
        return { success: true, user: newUser };
    } catch (error) {
        console.error('Register error:', error);
        return { success: false, error: error.message };
    }
};

// ƒêƒÉng nh·∫≠p
export const loginUser = async (email, password) => {
    try {
        await initializeUsers();
        
        // L·∫•y danh s√°ch users
        const usersJson = await AsyncStorage.getItem(USERS_KEY);
        const users = JSON.parse(usersJson) || [];
        
        console.log('üîç ƒêang t√¨m user v·ªõi email:', email);
        console.log('üìä T·ªïng s·ªë users trong database:', users.length);
        
        // T√¨m user v·ªõi email v√† password kh·ªõp
        const user = users.find(u => u.email === email && u.password === password);
        
        if (!user) {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y user ph√π h·ª£p');
            console.log('üí° H√£y th·ª≠ ƒëƒÉng k√Ω t√†i kho·∫£n m·ªõi ho·∫∑c d√πng:');
            console.log('   Email: test@example.com');
            console.log('   Password: 123456');
            throw new Error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
        }
        
        console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng:', user.name);
        
        // L∆∞u th√¥ng tin ƒëƒÉng nh·∫≠p
        await AsyncStorage.setItem(AUTH_KEY, JSON.stringify(user));
        await AsyncStorage.setItem('userData', JSON.stringify(user));
        
        return { success: true, user };
    } catch (error) {
        console.error('Login error:', error);
        return { success: false, error: error.message };
    }
};

// ƒêƒÉng xu·∫•t
export const logoutUser = async () => {
    try {
        await AsyncStorage.removeItem(AUTH_KEY);
        await AsyncStorage.removeItem('userData');
        return { success: true };
    } catch (error) {
        console.error('Logout error:', error);
        return { success: false, error: error.message };
    }
};

// L·∫•y th√¥ng tin user hi·ªán t·∫°i
export const getCurrentUser = async () => {
    try {
        const userJson = await AsyncStorage.getItem(AUTH_KEY);
        if (userJson) {
            return JSON.parse(userJson);
        }
        return null;
    } catch (error) {
        console.error('Get current user error:', error);
        return null;
    }
};

// Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
export const isAuthenticated = async () => {
    try {
        const user = await getCurrentUser();
        return user !== null;
    } catch (error) {
        console.error('Check auth error:', error);
        return false;
    }
};

// C·∫≠p nh·∫≠t th√¥ng tin user
export const updateUser = async (updatedData) => {
    try {
        // L·∫•y user hi·ªán t·∫°i
        const currentUser = await getCurrentUser();
        if (!currentUser) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }
        
        // L·∫•y danh s√°ch users
        const usersJson = await AsyncStorage.getItem(USERS_KEY);
        const users = JSON.parse(usersJson) || [];
        
        // T√¨m v√† c·∫≠p nh·∫≠t user
        const userIndex = users.findIndex(u => u.id === currentUser.id);
        if (userIndex === -1) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng');
        }
        
        // C·∫≠p nh·∫≠t th√¥ng tin
        const updatedUser = { ...users[userIndex], ...updatedData };
        users[userIndex] = updatedUser;
        
        // L∆∞u l·∫°i
        await AsyncStorage.setItem(USERS_KEY, JSON.stringify(users));
        await AsyncStorage.setItem(AUTH_KEY, JSON.stringify(updatedUser));
        await AsyncStorage.setItem('userData', JSON.stringify(updatedUser));
        
        return { success: true, user: updatedUser };
    } catch (error) {
        console.error('Update user error:', error);
        return { success: false, error: error.message };
    }
};
